// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByNulls"]
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  metadata          Json    @default("{}")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider, userId])
}

// We aren't using DB sessions, but next-auth likes this... I guess.
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionInvalidation {
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invalidatedAt DateTime @default(now())

  @@id([userId, invalidatedAt])
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String?
  username            String?               @unique @db.Citext
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  showNsfw            Boolean?              @default(false)
  blurNsfw            Boolean?              @default(true)
  isModerator         Boolean?              @default(false)
  tos                 Boolean?              @default(false)
  onboarded           Boolean?              @default(false)
  createdAt           DateTime              @default(now())
  deletedAt           DateTime?
  customerId          String?               @unique
  subscriptionId      String?
  subscription        CustomerSubscription?
  muted               Boolean?              @default(false)
  bannedAt            DateTime?
  autoplayGifs        Boolean?              @default(true)
  filePreferences     Json                  @default("{\"size\": \"pruned\", \"fp\": \"fp16\", \"format\": \"SafeTensor\"}")
  leaderboardShowcase String?

  accounts             Account[]
  sessions             Session[]
  images               Image[]
  models               Model[]                    @relation("creator")
  deletedModels        Model[]                    @relation("deletedBy")
  saves                SavedModel[]
  imports              Import[]
  keys                 ApiKey[]
  links                UserLink[]
  comments             Comment[]
  commentReactions     CommentReaction[]
  notifications        Notification[]
  notificationSettings UserNotificationSettings[]
  webhooks             Webhook[]
  interests            ModelInterest[]
  engagingUsers        UserEngagement[]           @relation("engagingUsers")
  engagedUsers         UserEngagement[]           @relation("engagedUsers")
  engagedModels        ModelEngagement[]
  engagedModelVersions ModelVersionEngagement[]
  metrics              UserMetric[]
  reports              Report[]
  questions            Question[]
  answers              Answer[]
  commentsv2           CommentV2[]
  questionReactions    QuestionReaction[]
  answerReactions      AnswerReaction[]
  commentV2Reactions   CommentV2Reaction[]
  answerVotes          AnswerVote[]
  tagsEngaged          TagEngagement[]

  imageReactions          ImageReaction[]
  sessionInvalidation     SessionInvalidation[]
  downloads               DownloadHistory[]
  purchases               Purchase[]
  cosmetics               UserCosmetic[]
  postReactions           PostReaction[]
  posts                   Post[]
  resourceReviews         ResourceReview[]
  tagImageVotes           TagsOnImageVote[]
  tagModelVotes           TagsOnModelsVote[]
  tagPostVotes            TagsOnPostVote[]
  resourceReviewReactions ResourceReviewReaction[]
  articleReactions        ArticleReaction[]
  articles                Article[]
  articleEngagements      ArticleEngagement[]
  leaderboardResults      LeaderboardResult[]
  receivedReports         UserReport[]
  engagedImages           ImageEngagement[]
  collections             Collection[]
  collectionItems         CollectionItem[]
  contributingCollections CollectionContributor[]
  homeBlocks              HomeBlock[]
  bounties                Bounty[]
  bountyEntries           BountyEntry[]
  sponsoredBounties       BountyBenefactor[]
  engagedBounties         BountyEngagement[]
  bountyEntryReactions    BountyEntryReaction[]
}

model CustomerSubscription {
  id                 String    @id
  userId             Int       @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata           Json
  status             String
  priceId            String
  price              Price     @relation(fields: [priceId], references: [id])
  productId          String
  product            Product   @relation(fields: [productId], references: [id])
  cancelAtPeriodEnd  Boolean
  cancelAt           DateTime?
  canceledAt         DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime
  endedAt            DateTime?
  updatedAt          DateTime?
}

model Product {
  id             String  @id
  active         Boolean
  name           String
  description    String?
  metadata       Json
  defaultPriceId String?

  prices                Price[]
  customerSubscriptions CustomerSubscription[]
  purchases             Purchase[]
}

model Price {
  id                    String                 @id
  productId             String
  product               Product                @relation(fields: [productId], references: [id])
  active                Boolean
  currency              String
  description           String?
  type                  String
  unitAmount            Int?
  interval              String?
  intervalCount         Int?
  metadata              Json
  customerSubscriptions CustomerSubscription[]
  purchases             Purchase[]
}

model Purchase {
  id         Int      @id @default(autoincrement())
  customerId String
  customer   User     @relation(fields: [customerId], references: [customerId])
  productId  String?
  product    Product? @relation(fields: [productId], references: [id])
  priceId    String?
  price      Price?   @relation(fields: [priceId], references: [id])
  status     String?
  createdAt  DateTime @default(now())
}

enum UserEngagementType {
  Follow
  Hide
}

model UserEngagement {
  userId       Int
  user         User               @relation("engagingUsers", fields: [userId], references: [id], onDelete: Cascade)
  targetUserId Int
  targetUser   User               @relation("engagedUsers", fields: [targetUserId], references: [id], onDelete: Cascade)
  type         UserEngagementType
  createdAt    DateTime           @default(now())

  @@id([userId, targetUserId])
}

model UserMetric {
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  timeframe         MetricTimeframe
  followingCount    Int             @default(0)
  followerCount     Int             @default(0)
  hiddenCount       Int             @default(0)
  uploadCount       Int             @default(0)
  reviewCount       Int             @default(0)
  answerCount       Int             @default(0)
  answerAcceptCount Int             @default(0)

  @@id([userId, timeframe])
}

enum LinkType {
  Sponsorship
  Social
  Other
}

model UserLink {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url    String
  type   LinkType
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
  AestheticGradient
  LORA
  LoCon
  Controlnet
  Upscaler
  MotionModule
  VAE
  Poses
  Wildcards
  Workflows
  Other
}

enum ImportStatus {
  Pending
  Processing
  Failed
  Completed
}

model Import {
  id         Int          @id @default(autoincrement())
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime     @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  source     String
  status     ImportStatus @default(Pending)
  data       Json?
  parentId   Int?
  parent     Import?      @relation("ImportChildren", fields: [parentId], references: [id], onDelete: SetNull)

  modelVersion ModelVersion[]
  model        Model?
  children     Import[]       @relation("ImportChildren")
  importId     Int?
}

enum ModelStatus {
  Draft // saved but incomplete
  Training // actively training
  Published // complete
  Scheduled // scheduled for publish
  Unpublished // taken from published -> hidden intentionally?
  UnpublishedViolation // taken from published -> hidden unintentionally?
  GatherInterest // unused?
  Deleted // deleted by user/system
}

enum TrainingStatus {
  Pending // not submitted yet (in draft mode)
  Submitted // submitted for processing (in civitai queue/delay, OR not picked up by external system)
  Processing // actively generating
  InReview // done, waiting for publish
  Failed // something went wrong either externally or internally
  Approved // published
}

enum CommercialUse {
  None
  Image
  RentCivit
  Rent
  Sell
}

enum CheckpointType {
  Trained
  Merge
}

enum ModelUploadType {
  Created
  Trained
}

enum ModelModifier {
  Archived
  TakenDown
}

enum ContentType {
  Image
  Character
  Text
  Audio
}

model Model {
  id                  Int             @id @default(autoincrement())
  name                String          @db.Citext
  description         String?
  type                ModelType
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  lastVersionAt       DateTime?
  nsfw                Boolean         @default(false)
  tosViolation        Boolean         @default(false)
  poi                 Boolean         @default(false)
  userId              Int
  user                User            @relation("creator", fields: [userId], references: [id])
  status              ModelStatus     @default(Draft)
  publishedAt         DateTime?
  fromImport          Import?         @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId        Int?            @unique
  meta                Json            @default("{}")
  deletedAt           DateTime?
  deletedBy           Int?
  deletedByUser       User?           @relation("deletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  checkpointType      CheckpointType?
  uploadType          ModelUploadType @default(Created)
  locked              Boolean         @default(false)
  underAttack         Boolean         @default(false)
  earlyAccessDeadline DateTime?
  mode                ModelModifier?

  // Licensing
  allowNoCredit         Boolean       @default(true)
  allowCommercialUse    CommercialUse @default(Sell)
  allowDerivatives      Boolean       @default(true)
  allowDifferentLicense Boolean       @default(true)

  modelVersions      ModelVersion[]
  tagsOnModels       TagsOnModels[]
  tagsOnModelsVotes  TagsOnModelsVote[]
  metrics            ModelMetric[]
  saves              SavedModel[]
  reports            ModelReport[]
  engagements        ModelEngagement[]
  comments           Comment[]
  interests          ModelInterest[]
  licenses           License[]
  threads            Thread[]
  resourceReviews    ResourceReview[]
  metricsDaily       ModelMetricDaily[]
  associatedFrom     ModelAssociations[]  @relation("ToModelAssociation")
  associations       ModelAssociations[]  @relation("FromModelAssociation")
  collectionItems    CollectionItem[]

  @@index([name])
  @@index([status, nsfw])
}

model License {
  id     Int     @id @default(autoincrement())
  name   String
  url    String
  models Model[]
}

model ModelInterest {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, modelId])
}

enum ModelEngagementType {
  Favorite
  Hide
}

model ModelEngagement {
  userId    Int
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model               @relation(fields: [modelId], references: [id], onDelete: Cascade)
  type      ModelEngagementType
  createdAt DateTime            @default(now())

  @@id([userId, modelId])
  @@index([modelId], type: Hash)
}

enum ModelVersionSponsorshipSettingsType {
  FixedPrice
  Bidding
}

model ModelVersionSponsorshipSettings {
  id                         Int                                 @id @default(autoincrement())
  modelVersionMonetizationId Int                                 @unique
  modelVersionMonetization   ModelVersionMonetization            @relation(fields: [modelVersionMonetizationId], references: [id], onDelete: Cascade)
  type                       ModelVersionSponsorshipSettingsType @default(FixedPrice)
  currency                   String
  unitAmount                 Int
}

enum ModelVersionMonetizationType {
  PaidAccess
  PaidEarlyAccess
  PaidGeneration
  CivitaiClubOnly
  MySubscribersOnly
  Sponsored
}

model ModelVersionMonetization {
  id                  Int                              @id @default(autoincrement())
  modelVersionId      Int                              @unique
  modelVersion        ModelVersion                     @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  type                ModelVersionMonetizationType     @default(PaidAccess)
  currency            String
  unitAmount          Int?
  sponsorshipSettings ModelVersionSponsorshipSettings?
}

model ModelVersion {
  id                   Int                       @id @default(autoincrement())
  index                Int?
  name                 String
  description          String?
  modelId              Int
  model                Model                     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  trainedWords         String[]
  steps                Int?
  epochs               Int?
  clipSkip             Int?
  vaeId                Int?
  vae                  ModelVersion?             @relation("vae", fields: [vaeId], references: [id], onDelete: SetNull)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  publishedAt          DateTime?
  status               ModelStatus               @default(Draft)
  trainingStatus       TrainingStatus?
  trainingDetails      Json?
  fromImport           Import?                   @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId         Int?
  inaccurate           Boolean                   @default(false)
  baseModel            String
  baseModelType        String?
  meta                 Json                      @default("{}")
  earlyAccessTimeFrame Int                       @default(0)
  monetization         ModelVersionMonetization?

  metrics                 ModelVersionMetric[]
  files                   ModelFile[]
  runStrategies           RunStrategy[]
  engagements             ModelVersionEngagement[]
  downloads               DownloadHistory[]
  imageResources          ImageResource[]
  posts                   Post[]
  resourceReviews         ResourceReview[]
  metricsDaily            ModelMetricDaily[]
  modelVersionExploration ModelVersionExploration[]
  vaeFor                  ModelVersion[]            @relation("vae")

  @@index([modelId], type: Hash)
}

enum ModelVersionEngagementType {
  Notify
}

model ModelVersionEngagement {
  userId         Int
  user           User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersionId Int
  modelVersion   ModelVersion               @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  type           ModelVersionEngagementType
  createdAt      DateTime                   @default(now())

  @@id([userId, modelVersionId])
}

enum ModelHashType {
  AutoV1
  AutoV2
  SHA256
  CRC32
  BLAKE3
}

model ModelFileHash {
  file      ModelFile     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int
  type      ModelHashType
  hash      String        @db.Citext
  createdAt DateTime      @default(now())

  @@id([fileId, type])
  @@index([hash], type: Hash)
}

enum ScanResultCode {
  Pending
  Success
  Danger
  Error
}

enum ModelFileVisibility {
  Sensitive // Choosing not to share
  Private // Hidden
  Public // Available to all
}

model ModelFile {
  id                Int                 @id @default(autoincrement())
  name              String
  url               String
  sizeKB            Float
  createdAt         DateTime            @default(now())
  type              String              @default("Model")
  modelVersionId    Int
  modelVersion      ModelVersion        @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  pickleScanResult  ScanResultCode      @default(Pending)
  exists            Boolean?
  pickleScanMessage String?
  virusScanResult   ScanResultCode      @default(Pending)
  virusScanMessage  String?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  rawScanResult     Json?
  hashes            ModelFileHash[]
  metadata          Json?
  visibility        ModelFileVisibility @default(Public)

  @@index([modelVersionId], type: Hash)
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  sizeKB     Float
  createdAt  DateTime @default(now())
  entityId   Int
  entityType String
  metadata   Json?

  @@index([entityType, entityId])
}

enum MetricTimeframe {
  Day
  Week
  Month
  Year
  AllTime
}

model ModelMetric {
  model          Model           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  timeframe      MetricTimeframe
  rating         Float           @default(0)
  ratingCount    Int             @default(0)
  downloadCount  Int             @default(0)
  favoriteCount  Int             @default(0)
  commentCount   Int             @default(0)
  collectedCount Int             @default(0)
  imageCount     Int             @default(0)

  @@id([modelId, timeframe])
}

model ModelVersionMetric {
  modelVersion   ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  timeframe      MetricTimeframe
  rating         Float           @default(0)
  ratingCount    Int             @default(0)
  downloadCount  Int             @default(0)
  favoriteCount  Int             @default(0)
  commentCount   Int             @default(0)
  collectedCount Int             @default(0)
  imageCount     Int             @default(0)

  @@id([modelVersionId, timeframe])
}

model ModelMetricDaily {
  modelId        Int
  model          Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  type           String
  date           DateTime     @db.Date
  count          Int

  @@id([modelId, modelVersionId, type, date])
  @@index(modelVersionId)
}

enum AssociationType {
  Suggested
}

model ModelAssociations {
  id             Int             @id @default(autoincrement())
  fromModelId    Int
  fromModel      Model           @relation("FromModelAssociation", fields: [fromModelId], references: [id], onDelete: Cascade)
  toModelId      Int?
  toModel        Model?          @relation("ToModelAssociation", fields: [toModelId], references: [id], onDelete: Cascade)
  toArticleId    Int?
  toArticle      Article?        @relation(fields: [toArticleId], references: [id], onDelete: Cascade)
  associatedById Int?
  createdAt      DateTime        @default(now())
  type           AssociationType
  index          Int?

  @@index([toModelId], type: Hash)
  @@index([fromModelId], type: Hash)
  @@index([toArticleId], type: Hash)
}

model DownloadHistory {
  userId         Int
  modelVersionId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  downloadAt     DateTime
  hidden         Boolean      @default(false)

  @@id([userId, modelVersionId])
  @@index([userId, downloadAt])
}

model ModActivity {
  id         Int      @id @default(autoincrement())
  userId     Int?
  activity   String
  entityType String?
  entityId   Int?
  createdAt  DateTime @default(now())

  @@unique([activity, entityType, entityId])
  @@index([createdAt])
}

enum ReportReason {
  TOSViolation
  NSFW
  Ownership
  AdminAttention
  Claim
}

enum ReportStatus {
  Pending
  Processing
  Actioned
  Unactioned
}

model Report {
  id                      Int          @id @default(autoincrement())
  userId                  Int
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason                  ReportReason
  createdAt               DateTime     @default(now())
  details                 Json?
  internalNotes           String?
  previouslyReviewedCount Int          @default(0)
  alsoReportedBy          Int[]        @default([]) // UserIds
  status                  ReportStatus
  statusSetAt             DateTime?
  statusSetBy             Int?

  model          ModelReport?
  comment        CommentReport?
  commentV2      CommentV2Report?
  image          ImageReport?
  resourceReview ResourceReviewReport?
  article        ArticleReport?
  post           PostReport?
  reportedUser   UserReport?
  collection     CollectionReport?
  bounty         BountyReport?
  bountyEntry    BountyEntryReport?
}

model ResourceReviewReport {
  resourceReviewId Int
  resourceReview   ResourceReview @relation(fields: [resourceReviewId], references: [id], onDelete: Cascade)
  reportId         Int            @unique
  report           Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, resourceReviewId])
  @@index([resourceReviewId], type: Hash)
}

model ModelReport {
  modelId  Int
  model    Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, modelId])
  @@index([modelId], type: Hash)
}

model CommentReport {
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reportId  Int     @unique
  report    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, commentId])
  @@index([commentId], type: Hash)
}

model CommentV2Report {
  commentV2Id Int
  commentV2   CommentV2 @relation(fields: [commentV2Id], references: [id], onDelete: Cascade)
  reportId    Int       @unique
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, commentV2Id])
  @@index([commentV2Id], type: Hash)
}

model ImageReport {
  imageId  Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, imageId])
  @@index([imageId], type: Hash)
}

model ArticleReport {
  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reportId  Int     @unique
  report    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, articleId])
  @@index([articleId], type: Hash)
}

model PostReport {
  postId   Int
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, postId])
  @@index([postId], type: Hash)
}

model UserReport {
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, userId])
  @@index([userId], type: Hash)
}

model CollectionReport {
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  reportId     Int        @unique
  report       Report     @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, collectionId])
  @@index([collectionId], type: Hash)
}

model BountyReport {
  bountyId Int
  bounty   Bounty @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, bountyId])
  @@index([bountyId], type: Hash)
}

model BountyEntryReport {
  bountyEntryId Int
  bountyEntry   BountyEntry @relation(fields: [bountyEntryId], references: [id], onDelete: Cascade)
  reportId      Int         @unique
  report        Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, bountyEntryId])
  @@index([bountyEntryId], type: Hash)
}

model ResourceReview {
  id             Int                      @id @default(autoincrement())
  modelId        Int
  model          Model                    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelVersionId Int
  modelVersion   ModelVersion             @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  rating         Int
  details        String?
  userId         Int
  user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread         Thread?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  exclude        Boolean                  @default(false)
  nsfw           Boolean                  @default(false)
  tosViolation   Boolean                  @default(false)
  metadata       Json?
  reactions      ResourceReviewReaction[]
  reports        ResourceReviewReport[]

  @@unique([modelVersionId, userId])
  @@index([modelVersionId], type: Hash)
  @@index([userId], type: Hash)
}

model ResourceReviewReaction {
  id        Int             @id @default(autoincrement())
  review    ResourceReview  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([reviewId, userId, reaction])
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model Post {
  id             Int           @id @default(autoincrement())
  nsfw           Boolean       @default(false)
  title          String?
  detail         String?
  userId         Int
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersionId Int?
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: SetNull)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  publishedAt    DateTime?
  metadata       Json?
  tosViolation   Boolean       @default(false)
  collectionId   Int?
  collection     Collection?   @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  images          Image[]
  tags            TagsOnPost[]
  reactions       PostReaction[]
  thread          Thread?
  metrics         PostMetric[]
  tagVotes        TagsOnPostVote[]
  reports         PostReport[]
  collectionItems CollectionItem[]

  @@index([modelVersionId])
  @@index([publishedAt])
}

model PostMetric {
  postId         Int
  post           Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  timeframe      MetricTimeframe
  likeCount      Int             @default(0)
  dislikeCount   Int             @default(0)
  laughCount     Int             @default(0)
  cryCount       Int             @default(0)
  heartCount     Int             @default(0)
  commentCount   Int             @default(0)
  collectedCount Int             @default(0)

  @@id([postId, timeframe])
}

enum ImageGenerationProcess {
  txt2img
  txt2imgHiRes
  img2img
  inpainting
}

enum NsfwLevel {
  None
  Soft
  Mature
  X
  Blocked
}

enum ImageIngestionStatus {
  Pending
  Scanned
  Error
  Blocked
  NotFound
}

enum MediaType {
  image
  video
  audio
}

model Image {
  id                Int                     @id @default(autoincrement())
  name              String?
  url               String
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  meta              Json? // image generation params
  hash              String?
  height            Int?
  width             Int?
  type              MediaType               @default(image)
  metadata          Json                    @default("{}") // file metadata
  nsfw              NsfwLevel               @default(None)
  tosViolation      Boolean                 @default(false)
  analysis          Json?
  generationProcess ImageGenerationProcess?
  featuredAt        DateTime?
  postId            Int?
  post              Post?                   @relation(fields: [postId], references: [id], onDelete: SetNull)
  needsReview       String?
  hideMeta          Boolean                 @default(false)
  index             Int?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  mimeType          String?
  sizeKB            Int?
  ingestion         ImageIngestionStatus    @default(Pending)
  blockedFor        String?

  reports         ImageReport[]
  reactions       ImageReaction[]
  thread          Thread?
  tags            TagsOnImage[]
  tagVotes        TagsOnImageVote[]
  metrics         ImageMetric[]
  resources       ImageResource[]
  engagements     ImageEngagement[]
  collectionItems CollectionItem[]
  collections     Collection[]
  connections     ImageConnection[]

  @@index([featuredAt])
  @@index([postId], type: Hash)
  @@index([userId, postId])
}

model ImageConnection {
  imageId    Int
  image      Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  entityId   Int
  entityType String

  @@id([imageId, entityType, entityId])
  @@index([entityType, entityId])
}

enum ImageEngagementType {
  Favorite
  Hide
}

model ImageEngagement {
  userId    Int
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId   Int
  image     Image               @relation(fields: [imageId], references: [id], onDelete: Cascade)
  type      ImageEngagementType
  createdAt DateTime            @default(now())

  @@id([userId, imageId])
  @@index([imageId])
}

model ImageResource {
  id             Int           @id @default(autoincrement())
  modelVersionId Int?
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  name           String?
  hash           String?
  imageId        Int
  image          Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  detected       Boolean       @default(false)

  @@unique([modelVersionId, name, imageId])
  @@index([imageId], type: Hash)
  @@index([imageId, modelVersionId])
}

model ImageMetric {
  image          Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int
  timeframe      MetricTimeframe
  likeCount      Int             @default(0)
  dislikeCount   Int             @default(0)
  laughCount     Int             @default(0)
  cryCount       Int             @default(0)
  heartCount     Int             @default(0)
  commentCount   Int             @default(0)
  collectedCount Int             @default(0)

  @@id([imageId, timeframe])
}

model CollectionMetric {
  collection       Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId     Int
  timeframe        MetricTimeframe
  followerCount    Int             @default(0)
  itemCount        Int             @default(0)
  contributorCount Int             @default(0)

  @@id([collectionId, timeframe])
}

enum ImageOnModelType {
  Example
  Training
}

enum TagTarget {
  Model
  Question
  Image
  Post
  Tag
  Article
  Bounty
}

enum TagType {
  UserGenerated
  Label
  Moderation
  System
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @db.Citext
  color      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  target     TagTarget[]
  type       TagType     @default(UserGenerated)
  nsfw       NsfwLevel   @default(None)
  unlisted   Boolean     @default(false)
  unfeatured Boolean     @default(false)
  isCategory Boolean     @default(false)
  adminOnly  Boolean     @default(false)

  toTags               TagsOnTags[]       @relation("TagsOnTags_fromTag")
  fromTags             TagsOnTags[]       @relation("TagsOnTags_toTag")
  tagsOnModels         TagsOnModels[]
  tagsOnModelsVotes    TagsOnModelsVote[]
  tagsOnQuestion       TagsOnQuestions[]
  tagsOnImage          TagsOnImage[]
  tagsOnImageVotes     TagsOnImageVote[]
  tagsOnPosts          TagsOnPost[]
  tagsOnArticles       TagsOnArticle[]
  tagsOnCollection     TagsOnCollection[]
  usersEngaged         TagEngagement[]
  metrics              TagMetric[]
  tagsOnPostVotes      TagsOnPostVote[]
  tagsOnBounties       TagsOnBounty[]

  @@unique([name])
}

model TagsOnTags {
  fromTagId Int
  fromTag   Tag      @relation("TagsOnTags_fromTag", fields: [fromTagId], references: [id], onDelete: Cascade)
  toTagId   Int
  toTag     Tag      @relation("TagsOnTags_toTag", fields: [toTagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([fromTagId, toTagId])
  @@index([toTagId], type: Hash)
}

model TagsOnModels {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())

  @@id([modelId, tagId])
  @@index([modelId], type: Hash)
}

model TagsOnModelsVote {
  modelId   Int
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vote      Int // 1 or -1
  createdAt DateTime @default(now())

  @@id([tagId, modelId, userId])
  @@index([modelId], type: Hash)
  @@index([userId], type: Hash)
}

model TagsOnQuestions {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int

  @@id([tagId, questionId])
  @@index([questionId], type: Hash)
}

enum TagSource {
  User
  Rekognition
  WD14
  Computed
}

model TagsOnImage {
  imageId     Int
  image       Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId       Int
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  automated   Boolean   @default(false)
  confidence  Int?
  disabled    Boolean   @default(false)
  disabledAt  DateTime?
  needsReview Boolean   @default(false)
  source      TagSource @default(User)

  @@id([tagId, imageId])
  @@index([imageId], type: Hash)
  @@index([automated])
  @@index([source])
  @@index([disabled])
}

model TagsOnImageVote {
  imageId   Int
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vote      Int // 1 or -1
  createdAt DateTime @default(now())

  @@id([tagId, imageId, userId])
  @@index([imageId], type: Hash)
  @@index([userId], type: Hash)
}

model TagsOnPost {
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId       Int
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  confidence  Int?
  disabled    Boolean  @default(false)
  needsReview Boolean  @default(false)

  @@id([tagId, postId])
  @@index([postId], type: Hash)
}

model TagsOnArticle {
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([tagId, articleId])
  @@index([articleId], type: Hash)
}

model TagsOnBounty {
  bountyId  Int
  bounty    Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([tagId, bountyId])
  @@index([bountyId], type: Hash)
}

model TagsOnPostVote {
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vote      Int // 1 or -1
  createdAt DateTime @default(now())

  @@id([tagId, postId, userId])
  @@index([postId], type: Hash)
  @@index([userId], type: Hash)
}

model TagMetric {
  tag           Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         Int
  timeframe     MetricTimeframe
  modelCount    Int             @default(0)
  imageCount    Int             @default(0)
  postCount     Int             @default(0)
  articleCount  Int             @default(0)
  hiddenCount   Int             @default(0)
  followerCount Int             @default(0)

  @@id([tagId, timeframe])
}

model SavedModel {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([modelId, userId])
}

model RunStrategy {
  id             Int          @id @default(autoincrement())
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  partnerId      Int
  partner        Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime     @default(now())
}

enum PartnerPricingModel {
  Duration
  PerImage
}

model Partner {
  id               Int                 @id @default(autoincrement())
  name             String
  homepage         String?
  tos              String?
  privacy          String?
  startupTime      Int? // Seconds
  onDemand         Boolean
  onDemandStrategy String? // URL Template
  onDemandTypes    ModelType[]         @default([])
  stepsPerSecond   Int
  pricingModel     PartnerPricingModel
  price            String
  about            String?
  createdAt        DateTime            @default(now())
  nsfw             Boolean             @default(false)
  poi              Boolean             @default(false)
  personal         Boolean             @default(false)
  token            String?             @unique
  runStrategies    RunStrategy[]
}

model KeyValue {
  key   String @id
  value Json
}

model ApiKey {
  id        Int        @id @default(autoincrement())
  key       String     @unique
  name      String
  scope     KeyScope[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
}

enum KeyScope {
  Read
  Write
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  parent       Comment? @relation("ParentComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId      Int
  locked       Boolean? @default(false)
  hidden       Boolean? @default(false)

  comments  Comment[]         @relation("ParentComments")
  reactions CommentReaction[]
  reports   CommentReport[]

  @@index([modelId], type: Hash)
  @@index([parentId], type: Hash)
}

model CommentReaction {
  id        Int             @id @default(autoincrement())
  commentId Int
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model Log {
  id        String   @id @default(cuid())
  event     String
  details   Json?
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  details   Json?
  createdAt DateTime  @default(now())
  viewedAt  DateTime?

  @@index([userId])
}

model UserNotificationSettings {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String
  disabledAt DateTime @default(now())

  @@unique([userId, type])
}

model Webhook {
  id        Int      @id @default(autoincrement())
  url       String
  notifyOn  String[] // Manually specified and managed since Prisma enums are not supported in arrays
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([url, userId])
}

model Question {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String   @db.Citext
  content          String
  selectedAnswerId Int?     @unique
  selectedAnswer   Answer?  @relation("SelectedAnswer", fields: [selectedAnswerId], references: [id])

  tags      TagsOnQuestions[]
  reactions QuestionReaction[]
  answers   Answer[]           @relation("Question")
  metrics   QuestionMetric[]
  thread    Thread?
}

model QuestionMetric {
  questionId   Int
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  heartCount   Int             @default(0)
  commentCount Int             @default(0)
  answerCount  Int             @default(0)

  @@id([questionId, timeframe])
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation("Question", fields: [questionId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reactions AnswerReaction[]
  metrics   AnswerMetric[]
  answerFor Question?        @relation("SelectedAnswer")
  votes     AnswerVote[]
  thread    Thread?
}

model AnswerVote {
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  vote      Boolean?
  createdAt DateTime @default(now())

  @@id([answerId, userId])
}

model MetricUpdateQueue {
  type      String
  id        Int
  createdAt DateTime @default(now())

  @@id([type, id])
}

model AnswerMetric {
  answerId     Int
  answer       Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  checkCount   Int
  crossCount   Int
  heartCount   Int
  commentCount Int

  @@id([answerId, timeframe])
}

model CommentV2 {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId     Int
  thread       Thread   @relation("thread", fields: [threadId], references: [id], onDelete: Cascade)
  childThread  Thread?  @relation("childThread")
  metadata     Json?

  reactions CommentV2Reaction[]
  reports   CommentV2Report[]

  @@index([threadId], type: Hash)
}

model Thread {
  id     Int     @id @default(autoincrement())
  locked Boolean @default(false)

  questionId    Int?            @unique
  question      Question?       @relation(fields: [questionId], references: [id], onDelete: SetNull)
  answerId      Int?            @unique
  answer        Answer?         @relation(fields: [answerId], references: [id], onDelete: SetNull)
  imageId       Int?            @unique
  image         Image?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
  postId        Int?            @unique
  post          Post?           @relation(fields: [postId], references: [id], onDelete: SetNull)
  reviewId      Int?            @unique
  review        ResourceReview? @relation(fields: [reviewId], references: [id], onDelete: SetNull)
  commentId     Int?            @unique
  comment       CommentV2?      @relation("childThread", fields: [commentId], references: [id], onDelete: SetNull)
  modelId       Int?            @unique
  model         Model?          @relation(fields: [modelId], references: [id], onDelete: SetNull)
  articleId     Int?            @unique
  article       Article?        @relation(fields: [articleId], references: [id], onDelete: SetNull)
  bountyId      Int?            @unique
  bounty        Bounty?         @relation(fields: [bountyId], references: [id], onDelete: SetNull)
  bountyEntryId Int?            @unique
  bountyEntry   BountyEntry?    @relation(fields: [bountyEntryId], references: [id], onDelete: SetNull)
  metadata      Json            @default("{}")

  comments CommentV2[] @relation("thread")

  @@index([reviewId], type: Hash)
  @@index([postId], type: Hash)
  @@index([questionId], type: Hash)
  @@index([imageId], type: Hash)
  @@index([articleId], type: Hash)
}

model QuestionReaction {
  id         Int             @id @default(autoincrement())
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  reaction   ReviewReactions
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([questionId, userId, reaction])
}

model AnswerReaction {
  id        Int             @id @default(autoincrement())
  answer    Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([answerId, userId, reaction])
}

model CommentV2Reaction {
  id        Int             @id @default(autoincrement())
  comment   CommentV2       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model ImageReaction {
  id        Int             @id @default(autoincrement())
  imageId   Int
  image     Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([imageId, userId, reaction])
}

model PostReaction {
  id        Int             @id @default(autoincrement())
  postId    Int
  post      Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([postId, userId, reaction])
}

model ArticleReaction {
  id        Int             @id @default(autoincrement())
  articleId Int
  article   Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([articleId, userId, reaction])
}

enum TagEngagementType {
  Hide
  Follow
  Allow
}

model TagEngagement {
  userId    Int
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  type      TagEngagementType
  createdAt DateTime          @default(now())

  @@id([userId, tagId])
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  emoji     String?
  color     String    @default("blue")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  startsAt  DateTime?
  endsAt    DateTime?
  metadata  Json?
}

enum CosmeticType {
  Badge
  NamePlate
}

enum CosmeticSource {
  Trophy
  Purchase
  Event
  Membership
}

model Cosmetic {
  id                  Int            @id @default(autoincrement())
  name                String
  description         String?
  type                CosmeticType
  source              CosmeticSource
  permanentUnlock     Boolean
  data                Json
  createdAt           DateTime?      @default(now())
  updatedAt           DateTime?      @updatedAt
  availableStart      DateTime?
  availableEnd        DateTime?
  productId           String?
  leaderboardId       String?
  leaderboardPosition Int?
  UserCosmetic        UserCosmetic[]
}

model UserCosmetic {
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cosmeticId Int
  cosmetic   Cosmetic  @relation(fields: [cosmeticId], references: [id], onDelete: Cascade)
  obtainedAt DateTime  @default(now()) // createdAt
  equippedAt DateTime?

  @@id([userId, cosmeticId])
}

model Article {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  nsfw         Boolean   @default(false)
  tosViolation Boolean   @default(false)
  metadata     Json?
  title        String
  content      String
  cover        String
  publishedAt  DateTime?
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  thread          Thread?
  reactions       ArticleReaction[]
  tags            TagsOnArticle[]
  reports         ArticleReport[]
  metrics         ArticleMetric[]
  engagements     ArticleEngagement[]
  associations    ModelAssociations[]
  collectionItems CollectionItem[]
}

enum ArticleEngagementType {
  Favorite
  Hide
}

model ArticleEngagement {
  userId    Int
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article               @relation(fields: [articleId], references: [id], onDelete: Cascade)
  type      ArticleEngagementType
  createdAt DateTime              @default(now())

  @@id([userId, articleId])
  @@index([articleId], type: Hash)
}

model ArticleMetric {
  article        Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId      Int
  timeframe      MetricTimeframe
  likeCount      Int             @default(0)
  dislikeCount   Int             @default(0)
  laughCount     Int             @default(0)
  cryCount       Int             @default(0)
  heartCount     Int             @default(0)
  commentCount   Int             @default(0)
  viewCount      Int             @default(0)
  favoriteCount  Int             @default(0)
  hideCount      Int             @default(0)
  collectedCount Int             @default(0)

  @@id([articleId, timeframe])
}

model Leaderboard {
  id                 String  @id
  index              Int
  title              String
  description        String
  scoringDescription String
  query              String
  active             Boolean
  public             Boolean

  results LeaderboardResult[]
}

model LeaderboardResult {
  leaderboardId String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  date          DateTime    @db.Date
  position      Int
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  score         Int         @default(0)
  metrics       Json        @default("{}")
  createdAt     DateTime    @default(now())

  @@id([leaderboardId, date, position])
  @@unique([leaderboardId, date, userId])
  @@index([userId], type: Hash)
}

model ModelVersionExploration {
  index          Int
  name           String
  prompt         String
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)

  @@id([modelVersionId, name])
}

enum GenerationSchedulers {
  EulerA
  Euler
  LMS
  Heun
  DPM2
  DPM2A
  DPM2SA
  DPM2M
  DPMSDE
  DPMFast
  DPMAdaptive
  LMSKarras
  DPM2Karras
  DPM2AKarras
  DPM2SAKarras
  DPM2MKarras
  DPMSDEKarras
  DDIM
}

model GenerationServiceProvider {
  name       String
  schedulers GenerationSchedulers[]

  @@id([name])
}

enum SearchIndexUpdateQueueAction {
  Update
  Delete
}

model SearchIndexUpdateQueue {
  type      String
  id        Int
  createdAt DateTime                     @default(now())
  action    SearchIndexUpdateQueueAction @default(Update)

  @@id([type, id, action])
}

enum CollectionWriteConfiguration {
  Private
  Public
  Review
}

enum CollectionReadConfiguration {
  Private
  Public
  Unlisted
}

enum CollectionType {
  Model
  Article
  Post
  Image
}

model Collection {
  id          Int                          @id @default(autoincrement())
  createdAt   DateTime?                    @default(now())
  updatedAt   DateTime?                    @updatedAt
  name        String
  description String?
  nsfw        Boolean?                     @default(false)
  userId      Int
  user        User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId     Int?
  image       Image?                       @relation(fields: [imageId], references: [id], onDelete: SetNull)
  write       CollectionWriteConfiguration @default(Private)
  read        CollectionReadConfiguration  @default(Private)
  type        CollectionType?

  items        CollectionItem[]
  contributors CollectionContributor[]
  tags         TagsOnCollection[]
  post         Post[]
  reports      CollectionReport[]
  metrics      CollectionMetric[]

  @@index([userId])
}

enum CollectionItemStatus {
  ACCEPTED
  REVIEW
  REJECTED
}

model CollectionItem {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime?            @default(now())
  updatedAt    DateTime?            @updatedAt
  collectionId Int
  collection   Collection           @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  articleId    Int?
  article      Article?             @relation(fields: [articleId], references: [id], onDelete: Cascade)
  postId       Int?
  post         Post?                @relation(fields: [postId], references: [id], onDelete: Cascade)
  imageId      Int?
  image        Image?               @relation(fields: [imageId], references: [id], onDelete: Cascade)
  modelId      Int?
  model        Model?               @relation(fields: [modelId], references: [id], onDelete: Cascade)
  addedById    Int?
  addedBy      User?                @relation(fields: [addedById], references: [id], onDelete: SetNull)
  note         String?
  status       CollectionItemStatus @default(ACCEPTED)

  @@unique([collectionId, articleId, postId, imageId, modelId])
}

enum CollectionContributorPermission {
  VIEW
  ADD
  ADD_REVIEW
  MANAGE
}

model CollectionContributor {
  createdAt    DateTime?                         @default(now())
  updatedAt    DateTime?                         @updatedAt
  userId       Int
  user         User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionId Int
  collection   Collection                        @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  permissions  CollectionContributorPermission[]

  @@id([userId, collectionId])
}

model TagsOnCollection {
  collectionId Int
  tagId        Int
  createdAt    DateTime?  @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, collectionId])
  @@index([collectionId], type: Hash)
}

enum HomeBlockType {
  Collection
  Announcement
  Leaderboard
  Social
}

model HomeBlock {
  id        Int           @id @default(autoincrement())
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata  Json          @default("{}")
  index     Int?
  type      HomeBlockType
  permanent Boolean       @default(false)
  sourceId  Int?
  source    HomeBlock?    @relation("Clones", fields: [sourceId], references: [id], onDelete: SetNull)
  clones    HomeBlock[]   @relation("Clones")
}

enum Currency {
  USD
  BUZZ
}

enum BountyType {
  ModelCreation
  LoraCreation
  EmbedCreation
  DataSetCreation
  DataSetCaption
  ImageCreation
  VideoCreation
  Other
}

enum BountyMode {
  Individual
  Split
}

enum BountyEntryMode {
  Open
  BenefactorsOnly
}

model Bounty {
  id                      Int             @id @default(autoincrement())
  userId                  Int?
  user                    User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  name                    String // Locked after created
  description             String
  startsAt                DateTime
  expiresAt               DateTime // Locked after created
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  details                 Json?
  mode                    BountyMode      @default(Individual)
  entryMode               BountyEntryMode @default(Open)
  type                    BountyType
  minBenefactorUnitAmount Int
  maxBenefactorUnitAmount Int? // Default to initial benefactor's entry
  entryLimit              Int             @default(1)
  nsfw                    Boolean         @default(false)
  poi                     Boolean         @default(false)
  complete                Boolean         @default(false)

  tags        TagsOnBounty[]
  entries     BountyEntry[]
  benefactors BountyBenefactor[]
  engagements BountyEngagement[]
  thread      Thread?
  metrics     BountyMetric[]
  reports     BountyReport[]

  @@index([userId], type: Hash)
  @@index([type])
  @@index([mode])
}

model BountyEntry {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  bountyId    Int
  bounty      Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  locked      Boolean  @default(false)
  description String?

  benefactors BountyBenefactor[]
  thread      Thread?
  reactions   BountyEntryReaction[]
  metrics     BountyEntryMetric[]
  reports     BountyEntryReport[]

  @@index([bountyId], type: Hash)
}

model BountyEntryReaction {
  bountyEntry   BountyEntry     @relation(fields: [bountyEntryId], references: [id], onDelete: Cascade)
  bountyEntryId Int
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  reaction      ReviewReactions
  createdAt     DateTime        @default(now())

  @@id([bountyEntryId, userId, reaction])
  @@index([bountyEntryId], type: Hash)
}

model BountyBenefactor {
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bountyId    Int
  bounty      Bounty       @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  unitAmount  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  awardedAt   DateTime?
  awardedToId Int?
  awartedTo   BountyEntry? @relation(fields: [awardedToId], references: [id], onDelete: SetNull)
  currency    Currency     @default(BUZZ)

  @@id([bountyId, userId])
  @@index([bountyId], type: Hash)
  @@index([userId], type: Hash)
}

enum BountyEngagementType {
  Favorite
  Track
}

model BountyEngagement {
  userId    Int
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bountyId  Int
  bounty    Bounty               @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  type      BountyEngagementType
  createdAt DateTime             @default(now())

  @@id([type, bountyId, userId])
  @@index([bountyId])
  @@index([userId], type: Hash)
}

model TipConnection {
  transactionId String // guid
  entityId      Int
  entityType    String

  @@id([entityType, entityId, transactionId])
}

model BountyMetric {
  bounty          Bounty          @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  bountyId        Int
  timeframe       MetricTimeframe
  favoriteCount   Int             @default(0)
  trackCount      Int             @default(0)
  entryCount      Int             @default(0)
  benefactorCount Int             @default(0)
  unitAmountCount Int             @default(0)
  commentCount    Int             @default(0)

  @@id([bountyId, timeframe])
}

model BountyEntryMetric {
  bountyEntry     BountyEntry     @relation(fields: [bountyEntryId], references: [id], onDelete: Cascade)
  bountyEntryId   Int
  timeframe       MetricTimeframe
  likeCount       Int             @default(0)
  dislikeCount    Int             @default(0)
  laughCount      Int             @default(0)
  cryCount        Int             @default(0)
  heartCount      Int             @default(0)
  unitAmountCount Int             @default(0)

  @@id([bountyEntryId, timeframe])
}
